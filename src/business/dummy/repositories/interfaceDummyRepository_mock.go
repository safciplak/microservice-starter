// Code generated by mockery. DO NOT EDIT.

package dummyRepositories

import (
	context "context"

	dummyModels "github.com/safciplak/microservice-starter/src/business/dummy/models"
	mock "github.com/stretchr/testify/mock"

	models "github.com/safciplak/microservice-starter/src/models"
)

// MockInterfaceDummyRepository is an autogenerated mock type for the InterfaceDummyRepository type
type MockInterfaceDummyRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, dummy
func (_m *MockInterfaceDummyRepository) Create(ctx context.Context, dummy *models.Dummy) error {
	ret := _m.Called(ctx, dummy)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Dummy) error); ok {
		r0 = rf(ctx, dummy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, dummy
func (_m *MockInterfaceDummyRepository) Delete(ctx context.Context, dummy *models.Dummy) error {
	ret := _m.Called(ctx, dummy)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Dummy) error); ok {
		r0 = rf(ctx, dummy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, params
func (_m *MockInterfaceDummyRepository) List(ctx context.Context, params *dummyModels.QueryParams) ([]models.Dummy, error) {
	ret := _m.Called(ctx, params)

	var r0 []models.Dummy
	if rf, ok := ret.Get(0).(func(context.Context, *dummyModels.QueryParams) []models.Dummy); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Dummy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dummyModels.QueryParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, params
func (_m *MockInterfaceDummyRepository) Read(ctx context.Context, params *dummyModels.QueryParams) (*models.Dummy, error) {
	ret := _m.Called(ctx, params)

	var r0 *models.Dummy
	if rf, ok := ret.Get(0).(func(context.Context, *dummyModels.QueryParams) *models.Dummy); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Dummy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dummyModels.QueryParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dummy
func (_m *MockInterfaceDummyRepository) Update(ctx context.Context, dummy *models.Dummy) error {
	ret := _m.Called(ctx, dummy)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Dummy) error); ok {
		r0 = rf(ctx, dummy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
