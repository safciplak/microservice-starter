// Code generated by mockery. DO NOT EDIT.

package dummyServices

import (
	context "context"

	dummyModels "github.com/safciplak/microservice-starter/src/business/dummy/models"
	mock "github.com/stretchr/testify/mock"

	models "github.com/safciplak/microservice-starter/src/models"
)

// MockInterfaceDummyService is an autogenerated mock type for the InterfaceDummyService type
type MockInterfaceDummyService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, params
func (_m *MockInterfaceDummyService) Create(ctx context.Context, params *dummyModels.CreateRequest) (*models.Dummy, error) {
	ret := _m.Called(ctx, params)

	var r0 *models.Dummy
	if rf, ok := ret.Get(0).(func(context.Context, *dummyModels.CreateRequest) *models.Dummy); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Dummy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dummyModels.CreateRequest) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, params
func (_m *MockInterfaceDummyService) Delete(ctx context.Context, params *dummyModels.BaseRequest) (*models.Dummy, error) {
	ret := _m.Called(ctx, params)

	var r0 *models.Dummy
	if rf, ok := ret.Get(0).(func(context.Context, *dummyModels.BaseRequest) *models.Dummy); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Dummy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dummyModels.BaseRequest) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, params
func (_m *MockInterfaceDummyService) List(ctx context.Context, params *dummyModels.ListRequest) ([]models.Dummy, error) {
	ret := _m.Called(ctx, params)

	var r0 []models.Dummy
	if rf, ok := ret.Get(0).(func(context.Context, *dummyModels.ListRequest) []models.Dummy); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Dummy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dummyModels.ListRequest) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, params
func (_m *MockInterfaceDummyService) Read(ctx context.Context, params *dummyModels.BaseRequest) (*models.Dummy, error) {
	ret := _m.Called(ctx, params)

	var r0 *models.Dummy
	if rf, ok := ret.Get(0).(func(context.Context, *dummyModels.BaseRequest) *models.Dummy); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Dummy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dummyModels.BaseRequest) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, params
func (_m *MockInterfaceDummyService) Update(ctx context.Context, params *dummyModels.UpdateRequest) (*models.Dummy, error) {
	ret := _m.Called(ctx, params)

	var r0 *models.Dummy
	if rf, ok := ret.Get(0).(func(context.Context, *dummyModels.UpdateRequest) *models.Dummy); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Dummy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dummyModels.UpdateRequest) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
