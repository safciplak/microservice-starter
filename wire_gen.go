// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/safciplak/capila/src/database"
	"github.com/safciplak/capila/src/helpers/environment"
	"github.com/safciplak/capila/src/http/context"
	"github.com/safciplak/capila/src/logger"
	"github.com/safciplak/microservice-starter/src"
	"github.com/safciplak/microservice-starter/src/business/dummy/handlers"
	"github.com/safciplak/microservice-starter/src/business/dummy/repositories"
	"github.com/safciplak/microservice-starter/src/business/dummy/services"
	"github.com/safciplak/microservice-starter/src/business/health/handlers"
	"github.com/safciplak/microservice-starter/src/business/health/repositories"
	"github.com/safciplak/microservice-starter/src/business/health/services"
)

// Injectors from wire.go:

// InitializeService specifies which dependencies need to be initialized for the service to start
func InitializeService() *microserviceStarter.Service {
	interfaceEnvironmentHelper := helpers.NewEnvironmentHelper()
	loggerLogger := logger.NewLogger(interfaceEnvironmentHelper)
	contextContext := context.NewContext()
	connection := database.NewDatabase(contextContext, loggerLogger)
	interfaceHealthRepository := healthRepositories.NewHealthRepository(connection)
	interfaceHealthService := healthServices.NewHealthService(interfaceEnvironmentHelper, interfaceHealthRepository)
	interfaceHealthHandler := healthHandlers.NewHealthHandler(interfaceHealthService)
	interfaceDummyRepository := dummyRepositories.NewDummyRepository(connection)
	interfaceDummyService := dummyServices.NewDummyService(interfaceDummyRepository)
	interfaceDummyHandler := dummyHandlers.NewDummyHandler(interfaceDummyService)
	routes := microserviceStarter.NewRoutes(loggerLogger, interfaceHealthHandler, interfaceDummyHandler)
	service := microserviceStarter.NewService(routes)
	return service
}
